.. _structure:

Structure
============

.. _projectScenes:

Project Scenes
----------------

#. **Demo** : the main optimized demo scene of the project (read more about scene structure :ref:`here <sceneStructure>`).
#. **Demo source** : same as `Demo` scene, but contains raw 3D models without optimization, also scene :ref:`streaming objects <sceneStreaming>` are disabled, including :ref:`static physics colliders <physicsShapeTransfer>`.
#. **Traffic test scene** : :ref:`traffic test scene <trafficTestScene>` where all parameters can be tested with a set of most :ref:`traffic <trafficCar>` situations.
#. **Props test scene** : :ref:`props test scene <propsTestScene>` where the workability of entities can be tested.
#. **Traffic stress scene** : stressed scene is extremely crowded with :ref:`vehicles <trafficCar>`.
#. **Traffic stress scene mobile** : mobile version of `Traffic stress scene`.
#. **Vehicle physics stress scene** : stress scene for the thousands cars with :ref:`Custom vehicle controller <customPhysicsVehicle>`.
#. **Vehicle custom physics test scene** : scene for testing various parameters of the :ref:`Custom vehicle controller <customPhysicsVehicle>`.

.. _sceneStructure:

Scene Hierarchy
----------------

	.. image:: /images/road/sceneStructure.png
	
.. _mainScene:
	
#. **Main scene**.
#. **City debugger** : contains all the :ref:`debuggers <subsceneGenerator>` for the city.

	.. _hub:

#. **Hub** : contains the :ref:`Entity Subscene Generator <subsceneGenerator>` (:ref:`read more <cityCreation>` on how to create it).
#. **City Settings Initializer** : contains the :ref:`General Settings <generalSettingsConfig>` of the `DOTS` city [moved to the `Config` tab].
#. **Main scene configs** (read more about the :ref:`config editing <configEdit>` workflow).
#. **Pools** : contains all the entity presets.
#. **Spawnpoint** : spawnpoint of the player (assigned in the `PlayerSpawner`).

	.. _subscene:

#. **Subscene** (`EntitySubScene`) : subscene into which all of the entities are converted (generated by the :ref:`Entity Subscene Generator <subsceneGenerator>`).
#. **Subscene configs** (read more about the :ref:`config editing <configEdit>` workflow).
#. **EntityRoadRoot** : object root generated by the :ref:`Entity Subscene Generator <subsceneGenerator>`.
#. **Road** : :ref:`road parent <roadParentInfo>` (read more about the :ref:`road editing <roadEdit>` workflow).

Scene Components
----------------

.. _roadParentInfo:
	
Road Parent
~~~~~~~~~~~~

The root of all crossroads in the scene.

	.. image:: /images/road/installation/RoadParent.png

How To Use
""""""""""""""

You read more :ref:`here <roadInstallation>`.

Settings
""""""""""""""

| **Connection waypoint offset** : automatically adds a :ref:`waypoint <pathWaypointInfo>` at each selected offset to the :ref:`automatically <autoPathConnection>` created :ref:`paths <path>` (if the value is greater than zero).
| **Connect segments** : creates the :ref:`automatically generated paths <autoPathConnection>`.
| **Reset segments** : reset the :ref:`automatically created paths <autoPathConnection>`.
| **Add crossroads** : adds crossroad if missing.
| **Bake path data** : :ref:`bake <bakingInfo>` road data. 
| **Clear unattached paths** : delete the :ref:`paths <path>` that are not connected to any a :ref:`TrafficNode <trafficNode>`.

.. _subsceneGenerator:

Entity Subscene Generator
~~~~~~~~~~~~

	.. image:: /images/road/installation/HubInfo.png

Where To Find
""""""""""""""

#. Create :ref:`city base <cityCreation>` **[if missing, optional step]**.
#. Select :ref:`Hub <hub>` in the scene.

How To Use
""""""""""""""

You read more :ref:`here <roadEntitySubscene>`.

Settings
""""""""""""""

| **Entity subscene save path** : save path of :ref:`subscene <subscene>`.
| **Entity subscene name** : name of :ref:`subscene <subscene>`.
| **Autosync configs** : on/off auto-sync config on :ref:`main scene <mainScene>` & :ref:`subscene <subscene>`.
| **Move tools** : on/off moving of following tools: :ref:`RoadSegmentPlacer <roadSegmentPlacer>`.
| **Move lights** : on/off moving of :ref:`subscene <trafficLightObject>`.
| **Move props** : on/off moving of :ref:`props <propsInfo>`.
| **Move surface** : on/off moving of the selected physics surface.
| **Copy physics shapes** : on/off feature of physics shape :ref:`cloning <physicsShapeTransfer>`.

Config
""""""""""""""

| **Copy to subscene** : :ref:`subscene <subscene>` configs will be synchronised with the :ref:`main scene <mainScene>`.
| **Copy from subscene** : :ref:`main scene <mainScene>` configs will be synchronised with the :ref:`subscene <subscene>`.

Buttons
""""""""""""""

| **Generate** : generates :ref:`subscene <subscene>`.
| **Move back** : move road from :ref:`subscene <subscene>` to the :ref:`main scene <mainScene>` (can be useful for editing roads in the :ref:`main scene <mainScene>` due to `Editor` performance).

.. _physicsShapeTransfer:

PhysicsShape Transfer Service
~~~~~~~~~~~~

* Tool for cloning physical shapes from the :ref:`main scene <mainScene>` to the :ref:`subscene <subscene>`. 
* There is also a tool exists to maintain both the `default physical world <https://docs.unity3d.com/2022.2/Documentation/Manual/PhysicsOverview.html>`_ and the `DOTS physical world <https://docs.unity3d.com/2022.2/Documentation/Manual/PhysicsOverview.html>`_ at the same time, so that `default colliders <https://docs.unity3d.com/ScriptReference/Collider.html>`_ and `DOTS colliders <https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/custom-shapes.html>`_ exist at the same time if you need to use `default colliders <https://docs.unity3d.com/ScriptReference/Collider.html>`_ in `MonoBehaviour <https://docs.unity3d.com/ScriptReference/MonoBehaviour.html>`_  classes.

Current project use cases:
	* Keep `default colliders <https://docs.unity3d.com/ScriptReference/Collider.html>`_ to work with :ref:`Legacy ragdoll <pedestrianRagdoll>` or with :ref:`Hybrid Mono <playerHybridMono>` player car.
	* Cloning of physical shapes from the :ref:`main scene <mainScene>` to be split them into subscene pieces by using :ref:`SubSceneChunk Creator <subSceneCreator>` or cloned into the :ref:`main subscene <subscene>` by using :ref:`Entity Subscene Generator <subsceneGenerator>`.

	.. note:: The tool can only use one tool at a time, either an :ref:`Entity Subscene Generator <subsceneGenerator>` or a :ref:`SubSceneChunk Creator <subSceneCreator>`.

Settings
""""""""""""""

	.. image:: /images/road/installation/PhysicsShapeTransferService.png

| **Clean components** : removes all components from the physics shape.
| **Clean childs** : removes all childs from the physics shape.
| **Search type** : searching shapes by layer or tag.

**Proccesing type** : 
	* **Stay previous** : cloning found `PhysicsShape <https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/custom-samples-physics-components.html>`_ or `Collider <https://docs.unity3d.com/ScriptReference/Collider.html>`_ to :ref:`subscene <subscene>`, useful to keep `default collider <https://docs.unity3d.com/ScriptReference/Collider.html>`_ and `Unity.Physics collider <https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/custom-samples-physics-components.html>`_ running at the same time.
	* **Disable collider** : cloning found `PhysicsShape <https://docs.unity3d.com/Packages/com.unity.physics@1.0/manual/custom-samples-physics-components.html>`_ or `Collider <https://docs.unity3d.com/ScriptReference/Collider.html>`_ to :ref:`subscene <subscene>` and disable it.

**Preinit layer** : enable :ref:`pre-init <extendedStateList>` cull state for physics objects.

| **New layer** : assigns new layer for cloned shape.